use master 
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
Go

WITH Blocked_Sessions AS (
       -- Collect lead blockers
       --     Pull all blocking IDs & check which ones are not being blocked themselves
       SELECT sys.dm_exec_requests.blocking_session_id  AS lead_session_id,
             sys.dm_exec_requests.blocking_session_id  AS blocking_session_id , 0 Cnt
       FROM sys.dm_exec_requests
       WHERE blocking_session_id  <> 0
         AND blocking_session_id  NOT IN (SELECT session_id
                                          FROM sys.dm_exec_requests
                                          WHERE sys.dm_exec_requests.blocking_session_id  <> 0)
       UNION ALL
       -- Recurse through list of blocked sessions
       SELECT Blocked_Sessions.lead_session_id, sys.dm_exec_requests.session_id, 1 Cnt
       FROM sys.dm_exec_requests
       JOIN Blocked_Sessions
             ON Blocked_Sessions.blocking_session_id  = sys.dm_exec_requests.blocking_session_id 
    ),
       Blocked AS (
             -- Add up all sessions blocked for the lead blocker
             SELECT lead_session_id, SUM(Cnt) AS sessions_blocked
             FROM Blocked_Sessions
             GROUP BY lead_session_id)
SELECT Blocked.*, Sess.last_request_start_time  last_request_start_time,
    ISNULL(Req.status,'sleeping') [status], SqlText.text [sql_text],
    STUFF((SELECT DISTINCT ISNULL(', ' + db.name,'')
            FROM sys.databases db
            JOIN sys.dm_tran_locks lcks
                ON db.database_id = lcks.resource_database_id
            WHERE lcks.request_session_id = Sess.session_id
            ORDER BY ISNULL(', ' + db.name,'')
            FOR XML PATH(''),TYPE).value('.','VARCHAR(MAX)')
        ,1,2,'') AS database_list
        , Conn.client_net_address, Sess.login_name
		INTO #BlockedSessions -- Store the result in a temporary table
FROM sys.dm_exec_connections Conn
LEFT OUTER JOIN sys.dm_exec_sessions Sess
       ON Conn.session_id = Sess.session_id
JOIN Blocked
       ON Blocked.lead_session_id = Sess.session_id
CROSS APPLY sys.dm_exec_sql_text(Conn.most_recent_sql_handle) SqlText
LEFT JOIN sys.dm_exec_requests Req
       ON Req.session_id = Sess.session_id
WHERE Blocked.sessions_blocked >= 1
-- We only care if the session has been blocked for longer than 30 seconds.
-- This can obviously be modified or commented out.
  AND DATEDIFF(s, Sess.last_request_start_time, getdate()) > 120;

  -- Email content
--DECLARE @queryResult NVARCHAR(MAX);
--SELECT @queryResult = (
--    SELECT *
--    FROM #BlockedSessions
--    FOR XML PATH(''), TYPE
--).value('.', 'NVARCHAR(MAX)');

  IF EXISTS (SELECT 1 FROM #BlockedSessions)
BEGIN

DECLARE @queryResult NVARCHAR(MAX);

SET @queryResult = '<html><body><table border="1">';
SET @queryResult += '<tr><th>Lead Session ID</th><th>Sessions Blocked</th><th>Session Started At</th><th>Status</th><th>SQL Text</th><th>Database List</th><th>Client Net Address</th><th>Login Name</th></tr>';

SELECT @queryResult += (
    SELECT
        '<tr><td>' + CAST(lead_session_id AS NVARCHAR(MAX)) + '</td>' +
        '<td>' + CAST(sessions_blocked AS NVARCHAR(MAX)) + '</td>' +
        '<td>' + CAST(last_request_start_time AS NVARCHAR(MAX)) + '</td>' +
        '<td>' + [status] + '</td>' +
        '<td>' + REPLACE([sql_text], '<', '&lt;') + '</td>' + 
        '<td>' + database_list + '</td>' +
        '<td>' + ISNULL(client_net_address, '') + '</td>' +
        '<td>' + ISNULL(login_name, '') + '</td></tr>'
    FROM #BlockedSessions
    FOR XML PATH(''), TYPE
).value('.', 'NVARCHAR(MAX)');

SET @queryResult += '</table></body></html>';

--SELECT * FROM #BlockedSessions

DECLARE @SessionID INT;
DECLARE @SQLQuery NVARCHAR(MAX);

-- Fetch the session ID from the table
SET  @SessionID= (select lead_session_id  FROM #BlockedSessions) 
--print @SessionID

IF @SessionID IS NOT NULL
BEGIN
    IF EXISTS (SELECT 1 FROM sys.dm_exec_sessions WHERE session_id = @SessionID)
    BEGIN
        SET @SQLQuery = 'KILL ' + CAST(@SessionID AS NVARCHAR(10));
        EXEC sp_executesql @SQLQuery;
        PRINT 'Query with Session ID ' + CAST(@SessionID AS NVARCHAR(10)) + ' has been terminated.';
    END
    ELSE
    BEGIN
        PRINT 'Session ID ' + CAST(@SessionID AS NVARCHAR(10)) + ' does not exist or the query has already completed.';
    END
END
ELSE
BEGIN
    PRINT 'No session ID found in the table.';
END


-- Send email with query result
EXEC msdb.dbo.sp_send_dbmail  
    @profile_name = 'Mails', 
    --@recipients = 'aswin.kumarvpkothuru@thyrocare.com', 
	@recipients = 'aswin.kumarvpkothuru@thyrocare.com;sivaramakrishnan.a@thyrocare.com;pallav.mittal@pharmeasy.in;rajesh.n@pharmeasy.in;shashikant.lokare@pharmeasy.in;sahil.p@pharmeasy.in', 
     @subject = 'LABSO Blocking Sessions Information',
    @body = @queryResult,
    @body_format = 'HTML'
END

DROP TABLE #BlockedSessions; -- Drop the temporary table after sending the email
